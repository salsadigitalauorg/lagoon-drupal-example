---
ahoyapi: v2

commands:
  up:
    usage: Build project.
    cmd: |
      docker-compose up -d "$@" &&
      docker-compose exec -T cli dockerize -wait tcp://mariadb:3306 -timeout 2m &&
      ahoy info;

  down:
    usage: Delete project (CAUTION).
    cmd: |
      if [ "$1" == "y" ]; then
        docker-compose down --volumes
      else
        ahoy confirm "Running this command will destroy your current site, database and build? Are you sure you didn't mean ahoy stop?" &&
        # Run this if confirm returns true
        docker-compose down --volumes ||
        # Run this if confirm returns false
        echo "OK, probably a wise choice..."
      fi

  build:
    usage: Build project.
    cmd: |
      docker-compose up -d --build "$@" &&
      docker-compose exec -T cli dockerize -wait tcp://mariadb:3306 -timeout 2m &&
      ahoy info;

  cli:
    usage: Start a shell inside cli container.
    cmd: docker-compose exec cli bash

  run:
    usage: Run command inside cli container.
    cmd: docker-compose exec -T cli bash -c "$*"

  drush:
    usage: Run drush commands in cli container.
    cmd: docker-compose exec -T cli drush "$@"

  logs:
    usage: Show Docker logs.
    cmd: docker-compose logs "$@"

  ps:
    usage: List running Docker containers.
    cmd: docker-compose ps

  restart:
    usage: Restart Docker containers.
    cmd: docker-compose restart

  stop:
    usage: Stop Docker containers.
    cmd: docker-compose stop "$@"

  login:
    usage: Login to a website.
    cmd: docker-compose exec -T cli drush uli "$@"
    
  unloop:
    usage: Fix local redirect loop
    cmd: |
      docker-compose exec -T cli drush ev '$u=\Drupal\user\Entity\User::load(1); $u->set("field_password_expiration", "0"); $u->save()' && \
      docker-compose exec -T cli drush ev '$u=\Drupal\user\Entity\User::load(1); $u->set("field_last_password_reset", date("Y-m-d\TH:i:s")); $u->save()'

  mysql-import:
    usage: Pipe in a sql file.  `ahoy mysql-import local.sql`
    cmd: |
      if [ -e "$@" ] ; then
        docker-compose exec mariadb bash -c 'mysql --execute="DROP DATABASE lagoon; CREATE DATABASE lagoon;"' &&
        docker-compose exec -T mariadb bash -c 'mysql lagoon ' < "$@"
      else echo "Provided sql file" "$@" "does not exist"
      fi

  mysql-dump:
    usage: Dump data out into a file. `ahoy mysql-dump local.sql`
    cmd: docker-compose exec -T mariadb bash -c 'mysqldump lagoon ' > "$@"

  lint:
    usage: Lint code
    cmd: echo "@todo"

  test-behat:
    usage: Run Behat tests.
    cmd: echo "@todo"

  test-phpunit:
    usage: Run phpunit tests
    cmd: echo "@todo"

  debug:
    usage: Enable debug configuration.
    cmd: |
      { ahoy run "php -v|grep -q Xdebug" && echo "Debug is already enabled"; } \
      || { export XDEBUG_ENABLE="true" && ahoy up cli test php && ahoy run "php -v|grep -q Xdebug" && echo "Enabled debug configuration. Use 'ahoy up' to disable."; }

  info:
    usage: Print information about this project.
    cmd: |
      echo "Project                  : " $(ahoy run "echo \$LAGOON_PROJECT")
      echo "Site local URL           : " $(ahoy run "echo \$LAGOON_ROUTE")
      echo "DB port on host          : " $(docker port $(docker-compose ps -q mariadb) 3306 | cut -d : -f 2)
      if [ "$1" ]; then
        echo "One-time login           : " $(ahoy login -- --no-browser)
      fi

  confirm:
    cmd: read -r -p "${@} [y/N] " response; [ ${response} = "y" ]
    hide: true

  my:
    usage: Custom commands for this project. See `ahoy my help`.
    imports:
      - 'custom/ahoy.yml'

  init:
    usage: Initialise the codebase on first-time setup (ahoy init project-name)
    cmd: |
      read -p 'Project name: ' project_name
      read -p 'Type [drupal|wordpress]: ' project_type
      read -p 'Composer codebase: [y|n]: ' composer_codebase

      if [[ -z "$project_name" ]] || [[ -z "$project_type" ]] || [[ -z "$composer_codebase" ]]; then
        echo "ERR: Missing values."
        exit 1
      fi;

      mv "docker-compose-$project_type.yml" docker-compose.yml && rm -rf docker-compose-*.yml
      mv "composer-$project_type.json" composer.json && rm -rf composer-*.json
      mv ".docker-$project_type" .docker && rm -rf .docker-*
      cp .env.default .env
      sed -i.bak "s/{{ PROJECT_NAME }}/$project_name/" .env && rm .env.bak
      sed -i.bak "s/{{ PROJECT_NAME }}/$project_name/" docker-compose.yml && rm docker-compose.yml.bak
      sed -i.bak "s/{{ PROJECT_NAME }}/$project_name/" .lagoon.yml && rm .lagoon.yml.bak
      sed -i.bak "s/{{ PROJECT_TYPE }}/$project_type/" .version.yml && rm .version.yml.bak

